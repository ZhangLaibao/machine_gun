Redis三种启动方式：

    1.最简启动
    ./redis-server
    
    2.指定参数启动
    ./redis-server --port 6380
    
    3.指定配置文件启动
    ./redis-server redis-conf/redis-6380.conf
    
    验证启动状态：
    1.
    [root@all-in-one bin]# ps -ef | grep redis
    root       4697      1  0 19:54 ?        00:00:00 ./redis-server 127.0.0.1:6380            
    root       4702   1184  0 19:54 pts/0    00:00:00 grep redis
    
    2.
    [root@all-in-one bin]# netstat -antlp | grep redis
    tcp        0      0 127.0.0.1:6380              0.0.0.0:*                   LISTEN      4697/./redis-server 
    
    3.
    [root@all-in-one bin]# ./redis-cli -p 6380 ping
    PONG

Redis 通用API:

    1.keys [pettern] - 
        pattern可使用正则表达式，时间复杂度为o(n)，不推荐在生成环境中使用
        建议使用scan命令代替
    
    2.dbsize
        时间复杂度为o(1)，redis内部维护一个计数器统计key的总数
    
    3.exists key
        时间复杂度o(1)，存在返回1，不存在返回0
    
    4.del key [key ...]
        时间复杂度o(1)
        
    5.expire key seconds - key在多少秒后过期
      ttl key - time to live 查看某一个key还能存活多长时间
        -1：没有过期时间
        -2：已经过期被干掉了
      persist:将有过期时间的key去除过期时间
      以上三个命令时间复杂度均为o(1)
      
    6.type key
        时间复杂度o(1)

Redis数据结构和内部编码


                                                        +========+
                                        +---------------|   raw  | 8个字节的长整型
                                        |               +========+
                                        |
                        +========+      |               +========+
               +--------| string | -----+---------------|   int  | 小于等于44个字节的字符串
               |        +========+      |               +========+
               |                        |
               |                        |               +========+
               |                        +---------------| embstr | 大于44个字节的字符串
               |                                        +========+
               |
               |                                        +=========+
               |                        +---------------|hashtable| 当哈希类型无法满足ziplist的条件时，会由ziplist升级为hashtable，但无法降级
               |        +========+      |               +=========+
               +--------|  hash  | -----+
               |        +========+      |               +========+
               |                        +---------------| ziplist| 当hash的key个数小于hash-max-ziplist-entries配置(默认512个)，同时所有value都小于hash-max-ziplist-value配置(默认64个字节)时
               |                                        +========+
               |
               |                                        +==========+
               |                        +---------------|linkedlist| 当列表类型无法满足ziplist的条件时，会由ziplist升级为linkedlist，但无法降级
+========+     |        +========+      |               +==========+
|  key   |--------------|  list  | -----+
+========+     |        +========+      |               +========+
               |                        +---------------| ziplist| 当list的元素个数小于hash-max-ziplist-entries配置(默认512个)，同时所有元素都小于hash-max-ziplist-value配置(默认64个字节)时
               |                                        +========+
               | 
               |                                        +=========+
               |                        +---------------|hashtable| 当集合类型无法满足intset的条件时
               |        +========+      |               +=========+
               +--------|  set   | -----+
               |        +========+      |               +========+
               |                        +---------------| intset | 当集合中的元素都是整数且元素个数小于set-max-intset-entries配置（默认512个）时
               |                                        +========+
               | 
               |                                        +========+
               |                        +---------------|skiplist| 当ziplist条件不满足时
               |        +========+      |               +========+
               +--------|  zset  | -----+
               |        +========+      |               +========+
               |                        +---------------| ziplist| 当zset的元素个数小于zset-max-ziplist-entries配置(默认128个)同时每个元素的值小于zset-max-ziplist-value配置(默认64字节)时
               |                                         +========+
               |
               |        +========+
               +--------| bitmap |       
               |        +========+
               |
               |        +============+
               +--------| hyperloglog|       
                        +============+
               


    redisObject:reids内部对数据对象的抽象
        数据类型(type)：string/hash/list/set/sorted set
        编码方式(encoding)：raw/int/hashtable/ziplist/linkedlist/intset
        数据指针(ptr)
        虚拟内存(vm)
        其他信息
    使用object encoding [key]命令可以查看内部编码相关信息，例如：
        ...> set hello word
        OK
        ...> object encoding hello
        "embstr"
        ...> 
        ...> hset hash:key:1 field:1 value1
        (integer) 1
        ...> object encoding hash:key:1
        "ziplist"
        ...> 
        ...> lpush list:1 item1
        (integer) 1
        ...> object encoding list:1
        "quicklist"
        ...> 
        ...> sadd set:1 member1
        (integer) 1
        ...> object encoding set:1
        "hashtable"
        ...> 
        ...> zadd zset:1 1 member1
        (integer) 1
        ...> object encoding zset:1
        "ziplist"
    
    除此之外，object命令还支持其他两个子命令：
        OBJECT REFCOUNT <key> 返回给定 key 引用所储存的值的次数
        OBJECT IDLETIME <key> 返回给定 key 自储存以来的空闲时间(没有被读写的时间)，以秒为单位。

Redis慢查询：
    reids命令的生命周期：
        1.客户端发送命令
        2.服务端接收命令，将命令排队等待执行
        3.命令执行
        4.返回结果
        
    所谓的redis慢查询是直第三阶段中，命令执行时间过长的命令(如：keys *)，redis会将慢查询以及参数放在先进先出的队列保存在内存中
    
    关于慢查询的另个配置项：
    1.slowlog-max-len
        保存慢查询的队列的最大长度，默认1000
        不要设置过小导致损失慢查询历史记录数据，建议定期持久化数据以备使用
        
    2.slowlog-log-slower-than
        慢查询阈值，单位微秒，默认10000，即10ms
        通常设置为1000，即1ms
        如果设置值为0，则所有命令都会进入慢查询
    可以使用config get [configName]查询
    
    配置方法：以上两个命令均支持动态修改，使用命令config set [configName] [configValue]
    
    慢查询日志的查看方法：
    1.slowlog get [n]: 获取前N条慢查询日志的内容
    2.slowlog len: 查询慢查询日志的长度

Redis pipeline：
    批量执行命令，在redis服务端会将命令拆散单独排队执行，此命令支支持对同一个redis节点进行
    
Redis bitmap:
    使用字符串实现
    
Redis GEO:
    使用zset实现
    
Redis持久化：
    1.RDB(Redis Database)
        触发方式：
            1.save(同步)/bgsave(异步)命令
            2.redis自动执行
        文件策略：
            如果存在老的.rdb文件，会替换
        异步处理机制：
            客户端发送bgsave命令，
            redis服务会调用操作系统的fork()函数生成子进程操作创建.rdb文件，
            子进程执行完毕通知主进程
        同步和异步的比较：
            1.save的阻塞发生在整个.rdb文件的生成周期，如果数据量大，这个阻塞时间会非常长
              bgsave的阻塞只发生在fork阶段，相对较快，在某些场景下此操作也会慢
            2.时间复杂度均为o(n)
            3.save的优点在于不需要额外的子进程，无需额外的资源消耗
              bgsave的优点在于阻塞时间短，但是需要额外的内存等资源
        自动执行规则：
            根据配置文件配置，满足条件时redis会内部调用bgsave命令
        RDB存在的问题：
            1.资源开销大
                1.1.内存，RDB方式将redis所有数据生成快照保存在.rdb文件中，本身是一个o(n)的过程
                1.2.调用系统的fork()函数生成子进程，消耗内存和CPU资源
                1.3.生成的.rdb文件保存在硬盘，需要IO开销，当.rdb文件很大时更明显
            2.可控性差，容易丢失数据
                在生成.rdb数据过程中宕机，会丢失数据

   2.AOF - 类似MySQL的binlog
        redis服务器将写命令存储到内存缓冲区，然后根据策略调用fsync()函数刷新到硬盘
        1.策略：根据配置
            always：每次，不会丢失数据，但是IO消耗很高
            everysec：默认，每秒，丢失1秒数据) - 推荐
            no：操作系统决定，不可控，数据丢失无法控制
            
        2.AOF重写：
            例如我们执行了下列命令：
                set key value1
                set key value2
                set key value3
            默认这三条命令都会进入AOF文件，但是事实上，只需要第三条命令进入AOF文件
            这就是AOF重写，即redis对AOF文件的优化，从而缩小AOF文件的尺寸，减轻硬盘空间占用并提高回复的速度
        
            AOF重写的两种方式
                1.bgwriteaof命令：客户端向reids服务器发送bgwriteaof命令，redis会fork()出子进程，对内存中的数据进行回溯，生成AOF文件，此过程类似RDB。
                2.根据配置
                    auto-aof-rewrite-min-size：AOF文件大小超过此值时进行重写
                    auto-aof-rewrite-percentage：AOF文件相比上一次重写后增长百分数
        
        3.配置 - 支持动态设置
            appendonly yes：打开aof，默认是关闭的
            appendfilename：文件名
            appendfsynce：刷新策略
            no-appendfsync-on-write：在生成aof文件的过程中，主进程的写命令是否同步到aof文件
            
    3.对比和选择
        1.比较
            +============+===========================+====================+
            |方式        |  RDB                      |   AOF              |
            +============+===========================+====================+
            |启动优先级  |  低                       |高(重启时会优先加载)|
            +============+===========================+====================+
            |体积        |  小(使用二进制格式)       |  大                |
            +============+===========================+====================+
            |恢复速度    |  快                       |  慢                |
            +============+===========================+====================+
            |数据安全性  |  丢数据                   |   与配置策略有关   |
            +============+===========================+====================+
            |轻重        |  重                       |   轻               |
            +============+===========================+====================+
        2.选择
            1.小分片：redis一般都是单机多部署，对每个redis实例，可以将其最大内存限制到较小的尺寸，比如4G
            2.监控内存/硬盘/CPU/网络情况
            3.不要将全部内存都分配给redis，为fork()子进程场景预留内存


​Redis的主从复制：
以2.8版本为界，Redis的主从复制分为新旧两种实现：
    旧版：分为同步和命令传播两个阶段
        同步(sync) - 静态复制，将从实例的状态同步至与主节点一致
​            1.从节点向主节点发送SYNC命令
            2.主节点执行BGSAVE命令，生成RDB文件并发送给​从节点，从节点从RDB文件中恢复数据
            3.主节点将缓冲区中的命令（即生成RDB文件，发送RDB文件等时间内）发送给从节点进行数据同步
        命令传播(command propogate) - 动态复制，主节点将执行的写命令分发给从节点执行
    上述复制实现在初次复制时是合理的，但是当主从节点稳定运行时出现从节点断线重连时，这种方式会大量浪费服务器资源，为解决这种问题，Redis提出了新的复制方案：
    新方案优化了同步过程，提出了PSYNC命令，PSYNC命令有full resynchronization和partial resynchronization两种模式，支持仅对断线期间数据的同步：
        1.主从服务器分别维护同步偏移量，这个偏移量表示已经成功复制的数据的位置；主服务器会维护一个复制积压缓冲区，积压缓冲区时一个先进先出的定长队列，在正常将命令同步给从节点时也会将命令保存在这一缓冲区，并用偏移量定位；
        2.从节点断线重连之后，向主节点发送PSYNC命令，报告自己的同步偏移量，主节点通过这一偏移量在复制积压缓冲区中寻找主从节点数据的增量，并将增量数据发送给从节点。如果在积压缓冲区中找不到这一偏移量，则执行全量同步        
​            
​            
​            
​            
​            
​            
​            
​            
​            
​            
​            